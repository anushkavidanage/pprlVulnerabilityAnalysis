def calc_min_hash_prob(lsh_band_size, lsh_num_band):
    """Initialise the parameters for Min-Hash Locality Sensitive Hashing (LSH)
       including generating random values for hash functions.

       LSH min-hashing follows the code provided here:
        https://github.com/chrisjmccormick/MinHash/blob/master/ \
              runMinHashExample.py

       The probability for a pair of sets with Jaccard sim 0 < s <= 1 to be
       included as a candidate pair is (with b = lsh_num_band and
       r = lsh_band_size, i.e. the number of rows/hash functions per band) is
       (Leskovek et al., 2014):

         p_cand = 1- (1 - s^r)^b

       Approximation of the 'threshold' of the S-curve (Leskovek et al., 2014)
       is: t = (1/k)^(1/r)

       If a string is given as plot_file_name then a graph of the probabilities
       will be generated and saved into this file.
    """

    num_hash_funct = lsh_band_size*lsh_num_band  # Total number needed

    b = float(lsh_num_band)
    r = float(lsh_band_size)
    t = (1.0/b)**(1.0/r)

    s_p_cand_list = []
    for i in range(1,10):
      s = 0.1*i
      p_cand = 1.0-(1.0-s**r)**b
      assert 0.0 <= p_cand <= 1.0
      s_p_cand_list.append((s, p_cand))

    print
    print 'LSH probabilities using Min-Hash'
    print '  Number of hash functions: %d' % (num_hash_funct)
    print '  Number of bands:          %d' % (lsh_num_band)
    print '  Size of bands:            %d' % (lsh_band_size)
    print '  Threshold of s-curve:     %.3f' % (t)
    print '  Probabilities for candidate pairs:'
    print '   Jacc_sim | prob(cand)'
    for (s,p_cand) in s_p_cand_list:
      print '     %.2f   |   %.5f' % (s, p_cand)
    print

# -----------------------------------------------------------------------------

# Is the below function correct???

def calc_hamm_lsh_prob(bit_array_len, lsh_num_bits, lsh_num_samples):

    s_p_cand_list = []
    for i in range(1,10):

      s = 0.1*i  # 0.1, 0.2, ... 0.9

      # Min hash equation where b=num bands and r=band size
      # p_cand = 1.0-(1.0-s**r)**b

      h = bit_array_len - s*bit_array_len  # Get Hamming distance

      p_cand = 1.0-(1.0-(1.0 - h/bit_array_len)**lsh_num_bits)**lsh_num_samples

      assert 0.0 <= p_cand <= 1.0
      s_p_cand_list.append((s, p_cand))

    #t = (1.0/b)**(1.0/r)  # Equation for min hash where b=num bands and
    #                      # r=band size
    t = (1.0/lsh_num_samples)**(1.0/lsh_num_bits)

    print 'LSH probabilities using Hamming LSH'
    print '  Number of samples:         %d' % (lsh_num_samples)
    print '  Number of bits per sample: %d' % (lsh_num_bits)
    print '  Threshold of s-curve:     %.3f' % (t)
    print '  Probabilities for candidate pairs:'
    print '   Hamm_sim | prob(cand)'
    for (s,p_cand) in s_p_cand_list:
      print '     %.2f   |   %.5f' % (s, p_cand)
    print

# -----------------------------------------------------------------------------

calc_min_hash_prob(10, 10)
calc_min_hash_prob(10, 20)
calc_min_hash_prob(10, 40)

calc_min_hash_prob(10, 20)
calc_min_hash_prob(20, 20)
calc_min_hash_prob(40, 20)

print '--------------------------------------------------------------------'
print

# BF len, num bits, num samples
calc_hamm_lsh_prob(1000, 10, 10)
calc_hamm_lsh_prob(1000, 10, 20)
calc_hamm_lsh_prob(1000, 10, 30)
calc_hamm_lsh_prob(1000, 10, 40)
calc_hamm_lsh_prob(1000, 10, 80)
calc_hamm_lsh_prob(1000, 10, 120)
calc_hamm_lsh_prob(1000, 10, 200)

calc_hamm_lsh_prob(1000, 15, 40)

calc_hamm_lsh_prob(1000, 20, 10)
calc_hamm_lsh_prob(1000, 20, 20)
calc_hamm_lsh_prob(1000, 20, 30)
calc_hamm_lsh_prob(1000, 20, 40)
calc_hamm_lsh_prob(1000, 20, 80)
calc_hamm_lsh_prob(1000, 20, 120)

calc_hamm_lsh_prob(1000, 20, 50)

calc_hamm_lsh_prob(1000, 50, 100)
